#!/usr/bin/env python3
import requests
import urllib.parse
import json
from typing import List, Dict

# –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
PROBLEMATIC_ADDRESSES = [
    "–ú–æ—Å–∫–≤–∞, –ø–ª. –°–∞–≤—ë–ª–æ–≤—Å–∫–æ–≥–æ –í–æ–∫–∑–∞–ª–∞, 2",
    "–ú–æ—Å–∫–≤–∞, –ê–Ω–∞–¥—ã—Ä—Å–∫–∏–π –ø—Ä., 1–ê",
    "–ú–æ—Å–∫–≤–∞, –ø–æ—Å. –†—É–±–ª—ë–≤–æ",
    "–ú–æ—Å–∫–≤–∞, –°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥, –ê–ª—Ç—É—Ñ—å–µ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, —Ä–∞–±–æ—á–∏–π –ø–æ—Å—ë–ª–æ–∫ –ë–µ—Å–∫—É–¥–Ω–∏–∫–æ–≤–æ"
]

BASE_URL = "http://127.0.0.1:8000"

def debug_address(address: str):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""
    print(f"\n{'='*100}")
    print(f"üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó: {address}")
    print(f"{'='*100}")
    
    # URL-–∫–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    encoded_query = urllib.parse.quote(address)
    
    # 1. –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    print("\nüìã 1. –ê–ù–ê–õ–ò–ó –ó–ê–ü–†–û–°–ê:")
    try:
        analyze_url = f"{BASE_URL}/analyze?q={encoded_query}"
        analyze_response = requests.get(analyze_url, timeout=10)
        analyze_response.raise_for_status()
        analyze_data = analyze_response.json()
        
        print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {analyze_data['original']}")
        print(f"   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: {analyze_data['normalized']}")
        print(f"   –ë–µ–∑ –¥–æ–º–∞: {analyze_data['text_without_house']}")
        print(f"   –î–æ–º: {analyze_data['house_number']}")
        print(f"   –ö–æ—Ä–ø—É—Å: {analyze_data['korpus']}")
        print(f"   –°—Ç—Ä–æ–µ–Ω–∏–µ: {analyze_data['stroenie']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return
    
    # 2. –ü–æ–∏—Å–∫ —É–ª–∏—Ü/–ø–ª–æ—â–∞–¥–µ–π
    print(f"\nüèõÔ∏è  2. –ü–û–ò–°–ö –£–õ–ò–¶/–ü–õ–û–©–ê–î–ï–ô:")
    try:
        # –ò—â–µ–º —É–ª–∏—Ü—ã/–ø–ª–æ—â–∞–¥–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –±–µ–∑ –¥–æ–º–∞
        street_query = analyze_data['text_without_house']
        if street_query:
            encoded_street = urllib.parse.quote(street_query)
            street_url = f"{BASE_URL}/search?q={encoded_street}&limit=10"
            street_response = requests.get(street_url, timeout=10)
            street_response.raise_for_status()
            street_data = street_response.json()
            
            print(f"   –ó–∞–ø—Ä–æ—Å: '{street_query}'")
            print(f"   –ù–∞–π–¥–µ–Ω–æ —É–ª–∏—Ü: {len(street_data['results'])}")
            
            for i, result in enumerate(street_data['results'][:5], 1):
                level = result.get('level', 'unknown')
                name = result.get('name', '')
                full_name = result.get('full_name', '')
                score = result.get('score', 0)
                print(f"   {i}. [{level}] {name} - {full_name} (—Å—á—ë—Ç: {score:.2f})")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —É–ª–∏—Ü: {e}")
    
    # 3. –ü–æ–∏—Å–∫ –¥–æ–º–æ–≤
    print(f"\nüè† 3. –ü–û–ò–°–ö –î–û–ú–û–í:")
    try:
        search_url = f"{BASE_URL}/search?q={encoded_query}&limit=10"
        search_response = requests.get(search_url, timeout=10)
        search_response.raise_for_status()
        search_data = search_response.json()
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ –¥–æ–º–æ–≤: {len(search_data['results'])}")
        
        for i, result in enumerate(search_data['results'][:5], 1):
            level = result.get('level', 'unknown')
            name = result.get('name', '')
            full_name = result.get('full_name', '')
            score = result.get('score', 0)
            house_num = result.get('house_number', '')
            korpus = result.get('korpus', '')
            stroenie = result.get('stroenie', '')
            
            print(f"   {i}. [{level}] {name} - {full_name}")
            print(f"      –î–æ–º: {house_num}, –ö–æ—Ä–ø—É—Å: {korpus}, –°—Ç—Ä–æ–µ–Ω–∏–µ: {stroenie}")
            print(f"      –°—á—ë—Ç: {score:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
            if result.get('house_type'):
                print(f"      –¢–∏–ø –¥–æ–º–∞: {result['house_type']}")
            if result.get('road_km'):
                print(f"      –ö–º –¥–æ—Ä–æ–≥–∏: {result['road_km']}")
            if result.get('street_guid'):
                print(f"      GUID —É–ª–∏—Ü—ã: {result['street_guid']}")
            print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –¥–æ–º–æ–≤: {e}")
    
    # 4. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    print(f"\nüîç 4. –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò:")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º –∞–¥—Ä–µ—Å–∞
    parts = address.split(',')
    for i, part in enumerate(parts):
        part = part.strip()
        if part and len(part) > 3:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —á–∞—Å—Ç–∏
            try:
                encoded_part = urllib.parse.quote(part)
                part_url = f"{BASE_URL}/search?q={encoded_part}&limit=3"
                part_response = requests.get(part_url, timeout=10)
                part_response.raise_for_status()
                part_data = part_response.json()
                
                if part_data['results']:
                    top_result = part_data['results'][0]
                    print(f"   –ß–∞—Å—Ç—å {i+1}: '{part}' -> {top_result['full_name']} (—Å—á—ë—Ç: {top_result['score']:.2f})")
                
            except Exception as e:
                print(f"   –ß–∞—Å—Ç—å {i+1}: '{part}' -> –æ—à–∏–±–∫–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú–ù–´–• –ê–î–†–ï–°–û–í")
    print(f"API: {BASE_URL}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try:
        health_response = requests.get(f"{BASE_URL}/health", timeout=5)
        health_response.raise_for_status()
        health_data = health_response.json()
        print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω: {health_data}")
    except Exception as e:
        print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∞–¥—Ä–µ—Å
    for address in PROBLEMATIC_ADDRESSES:
        debug_address(address)
    
    print(f"\n{'='*100}")
    print("üìä –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    print(f"{'='*100}")
    print("–û—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã:")
    print("1. –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω–¥–µ–∫—Å–µ (–ê–Ω–∞–¥—ã—Ä—Å–∫–∏–π –ø—Ä.)")
    print("2. –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–µ–π (–ø–ª. –°–∞–≤—ë–ª–æ–≤—Å–∫–æ–≥–æ –í–æ–∫–∑–∞–ª–∞)")
    print("3. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –∏–µ—Ä–∞—Ä—Ö–∏–π")
    print("4. –ù—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è (house_type, road_km, *_guid)")

if __name__ == "__main__":
    main()
