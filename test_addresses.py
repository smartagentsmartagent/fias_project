#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ –∞–¥—Ä–µ—Å–∞–º
"""
import requests
import urllib.parse
import json
from typing import List, Dict

# –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
ADDRESSES = [
    "–ú–æ—Å–∫–≤–∞, –¢—Ä–æ–∏—Ü–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥, —Ä-–Ω –ë–µ–∫–∞—Å–æ–≤–æ, —Ä–ø. –ö–∏–µ–≤—Å–∫–∏–π, –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —É–ª., 14",
    "–ú–æ—Å–∫–≤–∞, –ó–∞–ø–æ–≤–µ–¥–Ω–∞—è —É–ª., 16–∫2—Å1",
    "–ú–æ—Å–∫–≤–∞, –ø–ª. –°–∞–≤—ë–ª–æ–≤—Å–∫–æ–≥–æ –í–æ–∫–∑–∞–ª–∞, 2",
    "–ú–æ—Å–∫–≤–∞, —É–ª. –ì—Ä–∏–∑–æ–¥—É–±–æ–≤–æ–π, 2",
    "–ú–æ—Å–∫–≤–∞, –ê–Ω–∞–¥—ã—Ä—Å–∫–∏–π –ø—Ä., 1–ê",
    "–ú–æ—Å–∫–≤–∞, —É–ª. –ì—Ä–∏–∑–æ–¥—É–±–æ–≤–æ–π, 2",
    "–ú–æ—Å–∫–≤–∞, –î–º–∏—Ç—Ä–æ–≤—Å–∫–æ–µ —à., 122–î–∫11",
    "–ú–æ—Å–∫–≤–∞, –í–∞—Ä—à–∞–≤—Å–∫–æ–µ —à., 37—Å5",
    "–ú–æ—Å–∫–≤–∞, —É–ª. –£–¥–∞–ª—å—Ü–æ–≤–∞, 81",
    "–ú–æ—Å–∫–≤–∞, –ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥, —Ä-–Ω –ö–æ–º–º—É–Ω–∞—Ä–∫–∞, –¥. –î—É–¥–∫–∏–Ω–æ, –°–ù–¢ –î—É–¥–∫–∏–Ω–æ, 67",
    "–ú–æ—Å–∫–≤–∞, –ø–æ—Å. –†—É–±–ª—ë–≤–æ",
    "–ú–æ—Å–∫–≤–∞, –¢–∞–º–∞–Ω—Å–∫–∞—è —É–ª., 3—Å3",
    "–ú–æ—Å–∫–≤–∞, –ù–æ–≤–æ—Å—Ö–æ–¥–Ω–µ–Ω—Å–∫–æ–µ —à., 84—Å2",
    "–ú–æ—Å–∫–≤–∞, –°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥, –ê–ª—Ç—É—Ñ—å–µ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, —Ä–∞–±–æ—á–∏–π –ø–æ—Å—ë–ª–æ–∫ –ë–µ—Å–∫—É–¥–Ω–∏–∫–æ–≤–æ"
]

BASE_URL = "http://127.0.0.1:8000"

def test_address(address: str) -> Dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∞–¥—Ä–µ—Å"""
    print(f"\n{'='*80}")
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º: {address}")
    print(f"{'='*80}")
    
    # URL-–∫–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    encoded_query = urllib.parse.quote(address)
    
    # –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    try:
        analyze_url = f"{BASE_URL}/analyze?q={encoded_query}"
        analyze_response = requests.get(analyze_url, timeout=10)
        analyze_response.raise_for_status()
        analyze_data = analyze_response.json()
        
        print("üìã –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞:")
        print(f"   –û—Ä–∏–≥–∏–Ω–∞–ª: {analyze_data['original']}")
        print(f"   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: {analyze_data['normalized']}")
        print(f"   –ë–µ–∑ –¥–æ–º–∞: {analyze_data['text_without_house']}")
        print(f"   –î–æ–º: {analyze_data['house_number']}")
        print(f"   –ö–æ—Ä–ø—É—Å: {analyze_data['korpus']}")
        print(f"   –°—Ç—Ä–æ–µ–Ω–∏–µ: {analyze_data['stroenie']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return {"error": str(e)}
    
    # –ü–æ–∏—Å–∫
    try:
        search_url = f"{BASE_URL}/search?q={encoded_query}&limit=5"
        search_response = requests.get(search_url, timeout=10)
        search_response.raise_for_status()
        search_data = search_response.json()
        
        print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–Ω–∞–π–¥–µ–Ω–æ: {len(search_data['results'])}):")
        
        for i, result in enumerate(search_data['results'][:3], 1):
            print(f"\n   {i}. {result['full_name']}")
            print(f"      ID: {result['id']}")
            print(f"      –£—Ä–æ–≤–µ–Ω—å: {result['level']}")
            print(f"      –î–æ–º: {result['house_number']}")
            print(f"      –ö–æ—Ä–ø—É—Å: {result['korpus']}")
            print(f"      –°—Ç—Ä–æ–µ–Ω–∏–µ: {result['stroenie']}")
            if result.get('geo'):
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result['geo']['lat']:.6f}, {result['geo']['lon']:.6f}")
            else:
                print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: –Ω–µ —É–∫–∞–∑–∞–Ω—ã")
            print(f"      –°—á—ë—Ç: {result['score']:.2f}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è
            if result.get('house_type'):
                print(f"      –¢–∏–ø –¥–æ–º–∞: {result['house_type']}")
            if result.get('road_km'):
                print(f"      –ö–º –¥–æ—Ä–æ–≥–∏: {result['road_km']}")
            if result.get('street_guid'):
                print(f"      GUID —É–ª–∏—Ü—ã: {result['street_guid']}")
        
        return {
            "analyze": analyze_data,
            "search": search_data,
            "top_result": search_data['results'][0] if search_data['results'] else None
        }
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return {"error": str(e)}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –≤ FIAS API")
    print(f"API: {BASE_URL}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    try:
        health_response = requests.get(f"{BASE_URL}/health", timeout=5)
        health_response.raise_for_status()
        health_data = health_response.json()
        print(f"‚úÖ API –¥–æ—Å—Ç—É–ø–µ–Ω: {health_data}")
    except Exception as e:
        print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return
    
    results = []
    
    for address in ADDRESSES:
        result = test_address(address)
        results.append({
            "address": address,
            "result": result
        })
    
    # –°–≤–æ–¥–∫–∞
    print(f"\n{'='*80}")
    print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print(f"{'='*80}")
    
    successful = 0
    for i, item in enumerate(results, 1):
        address = item["address"]
        result = item["result"]
        
        if "error" in result:
            print(f"{i:2d}. ‚ùå {address[:50]}... - –û–®–ò–ë–ö–ê")
        else:
            successful += 1
            top_result = result.get("top_result")
            if top_result:
                print(f"{i:2d}. ‚úÖ {address[:50]}... - {top_result['full_name']}")
            else:
                print(f"{i:2d}. ‚ö†Ô∏è  {address[:50]}... - –ù–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    
    print(f"\nüìà –ò—Ç–æ–≥–æ: {successful}/{len(ADDRESSES)} —É—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")

if __name__ == "__main__":
    main()
