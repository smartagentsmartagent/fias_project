#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
"""
import requests
import urllib.parse
import json
from typing import List, Dict

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Å—Ç—ã
with open('queries/tests.json', 'r', encoding='utf-8') as f:
    tests_data = json.load(f)

# –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã (180-184)
updated_tests = [test for test in tests_data['tests'] if test['id'] in [180, 181, 182, 183, 184]]

BASE_URL = "http://147.45.214.115:8000"

def test_query(test: Dict) -> Dict:
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å"""
    print(f"\n{'='*80}")
    print(f"–¢–µ—Å—Ç ID: {test['id']}")
    print(f"–ó–∞–ø—Ä–æ—Å: {test['query']}")
    print(f"–û–∂–∏–¥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç: {test['expected_answer']}")
    print(f"{'='*80}")
    
    # URL-–∫–æ–¥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    encoded_query = urllib.parse.quote(test['query'])
    
    # –ü–æ–∏—Å–∫
    try:
        search_url = f"{BASE_URL}/search?q={encoded_query}&limit=1"
        search_response = requests.get(search_url, timeout=10)
        search_response.raise_for_status()
        search_data = search_response.json()
        
        if search_data['results']:
            actual_result = search_data['results'][0]['full_name']
            print(f"üîç –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {actual_result}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ
            if actual_result == test['expected_answer']:
                print("‚úÖ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù")
                return {"status": "passed", "actual": actual_result}
            else:
                print("‚ùå –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù")
                print(f"   –û–∂–∏–¥–∞–ª–æ—Å—å: {test['expected_answer']}")
                print(f"   –ü–æ–ª—É—á–µ–Ω–æ:  {actual_result}")
                return {"status": "failed", "actual": actual_result}
        else:
            print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            return {"status": "no_results"}
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {"status": "error", "error": str(e)}

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: {len(updated_tests)}")
    
    results = []
    passed = 0
    failed = 0
    
    for test in updated_tests:
        result = test_query(test)
        results.append({"test_id": test['id'], "result": result})
        
        if result['status'] == 'passed':
            passed += 1
        else:
            failed += 1
    
    print(f"\n{'='*80}")
    print("–ò–¢–û–ì–ò:")
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ: {passed}")
    print(f"–ù–µ –ø—Ä–æ–π–¥–µ–Ω–æ: {failed}")
    print(f"–í—Å–µ–≥–æ: {len(updated_tests)}")
    print(f"{'='*80}")

if __name__ == "__main__":
    main()
