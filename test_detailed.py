#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è FIAS
"""
import requests
import json

def test_detailed_search():
    """–î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    base_url = "http://localhost:8000"
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∏–∑ working.md
    test_queries = [
        "–ú–æ—Å–∫–≤–∞, –í–∞—Ä—à–∞–≤—Å–∫–æ–µ —à., 37—Å5",
        "–ú–æ—Å–∫–≤–∞, –ø–ª. –°–∞–≤—ë–ª–æ–≤—Å–∫–æ–≥–æ –í–æ–∫–∑–∞–ª–∞, 2",
        "–ú–æ—Å–∫–≤–∞, –û—Ä–µ—Ö–æ–≤—ã–π –±—É–ª—å–≤–∞—Ä, 39–ö2",
        "–ú–æ—Å–∫–≤–∞, –°–≤–æ–±–æ–¥–Ω—ã–π –ø—Ä–æ—Å–ø–µ–∫—Ç, 37/18",
        "–ú–æ—Å–∫–≤–∞, —É–ª. –ë –î–º–∏—Ç—Ä–æ–≤–∫–∞, 7/5—Å2"
    ]
    
    print("üîç –î–µ—Ç–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ FIAS")
    print("=" * 60)
    
    for i, query in enumerate(test_queries, 1):
        print(f"\n{i}. –ó–∞–ø—Ä–æ—Å: {query}")
        print("-" * 50)
        
        try:
            # –¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞
            analyze_response = requests.get(f"{base_url}/analyze", params={"q": query})
            if analyze_response.status_code == 200:
                analyze_data = analyze_response.json()
                print(f"üîß –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞:")
                print(f"   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: {analyze_data.get('normalized_query', 'N/A')}")
                print(f"   –î–æ–º: {analyze_data.get('house_number', 'N/A')}")
                print(f"   –ö–æ—Ä–ø—É—Å: {analyze_data.get('korpus', 'N/A')}")
                print(f"   –°—Ç—Ä–æ–µ–Ω–∏–µ: {analyze_data.get('stroenie', 'N/A')}")
            
            # –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞
            search_response = requests.get(f"{base_url}/search", params={
                "q": query,
                "limit": 3
            })
            
            if search_response.status_code == 200:
                search_data = search_response.json()
                print(f"\nüîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
                print(f"   –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {search_data.get('total', 0)}")
                
                for j, result in enumerate(search_data.get('results', [])[:3], 1):
                    print(f"   {j}. {result.get('full_name', 'N/A')}")
                    print(f"      –£—Ä–æ–≤–µ–Ω—å: {result.get('level', 'N/A')}")
                    print(f"      ID: {result.get('id', 'N/A')}")
                    if result.get('geo_point'):
                        geo = result['geo_point']
                        print(f"      –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {geo.get('lat', 'N/A')}, {geo.get('lon', 'N/A')}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {search_response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

def test_automated_tests():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Ç–µ—Å—Ç–æ–≤"""
    print("\n\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤
        tests_response = requests.get("http://localhost:8000/tests")
        if tests_response.status_code == 200:
            tests_data = tests_response.json()
            total_tests = len(tests_data.get('tests', []))
            print(f"üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_tests}")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
            run_response = requests.post("http://localhost:8000/tests/run")
            if run_response.status_code == 200:
                run_data = run_response.json()
                print(f"‚úÖ –¢–µ—Å—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã:")
                print(f"   –í—Å–µ–≥–æ: {run_data.get('total', 0)}")
                print(f"   –ü—Ä–æ—à–ª–æ: {run_data.get('passed', 0)}")
                print(f"   –ü—Ä–æ–≤–∞–ª–∏–ª–æ—Å—å: {run_data.get('failed', 0)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                results = run_data.get('results', [])
                print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
                for i, result in enumerate(results[:5], 1):
                    status = "‚úÖ" if result.get('is_correct') else "‚ùå"
                    print(f"   {i}. {status} {result.get('query', 'N/A')}")
                    if not result.get('is_correct'):
                        print(f"      –û–∂–∏–¥–∞–ª–æ—Å—å: {result.get('expected', 'N/A')}")
                        print(f"      –ü–æ–ª—É—á–µ–Ω–æ: {result.get('actual', 'N/A')}")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤: {run_response.status_code}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {tests_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

def test_edge_cases():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
    print("\n\nüî¨ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤")
    print("=" * 40)
    
    edge_cases = [
        "–ú–æ—Å–∫–≤–∞",  # –¢–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥
        "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è",  # –ë–µ–∑ –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞
        "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1",  # –ü—Ä–æ—Å—Ç–æ–π –Ω–æ–º–µ—Ä
        "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1–∫1",  # –° –∫–æ—Ä–ø—É—Å–æ–º
        "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1—Å1",  # –°–æ —Å—Ç—Ä–æ–µ–Ω–∏–µ–º
        "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1–∫1—Å1",  # –° –∫–æ—Ä–ø—É—Å–æ–º –∏ —Å—Ç—Ä–æ–µ–Ω–∏–µ–º
        "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1/2",  # –î—Ä–æ–±–Ω—ã–π –Ω–æ–º–µ—Ä
        "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 1/2–∫1—Å1",  # –°–ª–æ–∂–Ω—ã–π —Å–ª—É—á–∞–π
    ]
    
    for i, query in enumerate(edge_cases, 1):
        print(f"\n{i}. –ì—Ä–∞–Ω–∏—á–Ω—ã–π —Å–ª—É—á–∞–π: {query}")
        
        try:
            response = requests.get("http://localhost:8000/search", params={
                "q": query,
                "limit": 1
            })
            
            if response.status_code == 200:
                data = response.json()
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {data.get('total', 0)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                if data.get('results'):
                    print(f"   üè† –ü–µ—Ä–≤—ã–π: {data['results'][0].get('full_name', 'N/A')}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")

if __name__ == "__main__":
    test_detailed_search()
    test_automated_tests()
    test_edge_cases()
