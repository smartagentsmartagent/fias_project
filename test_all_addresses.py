#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤—Å–µ—Ö –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
"""
import requests
import json
from typing import List, Dict

def test_addresses():
    base_url = "http://localhost:8000"
    
    # –í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_addresses = [
        "–ú–æ—Å–∫–≤–∞, –°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥, –ê–ª—Ç—É—Ñ—å–µ–≤—Å–∫–∏–π —Ä–∞–π–æ–Ω, —Ä–∞–±–æ—á–∏–π –ø–æ—Å—ë–ª–æ–∫ –ë–µ—Å–∫—É–¥–Ω–∏–∫–æ–≤–æ",
        "–ú–æ—Å–∫–≤–∞, –í–∞—Ä—à–∞–≤—Å–∫–æ–µ —à., 37—Å5",
        "–ú–æ—Å–∫–≤–∞, –¢—Ä–æ–∏—Ü–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥, —Ä-–Ω –ë–µ–∫–∞—Å–æ–≤–æ, —Ä–ø. –ö–∏–µ–≤—Å–∫–∏–π, –°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω–∞—è —É–ª., 14",
        "–ú–æ—Å–∫–≤–∞, –ó–∞–ø–æ–≤–µ–¥–Ω–∞—è —É–ª., 16–∫2—Å1",
        "–ú–æ—Å–∫–≤–∞, –ø–ª. –°–∞–≤—ë–ª–æ–≤—Å–∫–æ–≥–æ –í–æ–∫–∑–∞–ª–∞, 2",
        "–ú–æ—Å–∫–≤–∞, —É–ª. –ì—Ä–∏–∑–æ–¥—É–±–æ–≤–æ–π, 2",
        "–ú–æ—Å–∫–≤–∞, –ê–Ω–∞–¥—ã—Ä—Å–∫–∏–π –ø—Ä., 1–ê",
        "–ú–æ—Å–∫–≤–∞, –í–∞—Ä—à–∞–≤—Å–∫–æ–µ —à., 37—Å5",
        "–ú–æ—Å–∫–≤–∞, –ù–æ–≤–æ–º–æ—Å–∫–æ–≤—Å–∫–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –æ–∫—Ä—É–≥, —Ä-–Ω –ö–æ–º–º—É–Ω–∞—Ä–∫–∞, –¥. –î—É–¥–∫–∏–Ω–æ, –°–ù–¢ –î—É–¥–∫–∏–Ω–æ, 67",
        "–ú–æ—Å–∫–≤–∞, –ø–æ—Å. –†—É–±–ª—ë–≤–æ",
        "–ú–æ—Å–∫–≤–∞, –¢–∞–º–∞–Ω—Å–∫–∞—è —É–ª., 3—Å3",
        "–ú–æ—Å–∫–≤–∞, –ù–æ–≤–æ—Å—Ö–æ–¥–Ω–µ–Ω—Å–∫–æ–µ —à., 84—Å2"
    ]
    
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ü–†–û–ë–õ–ï–ú–ù–´–• –ê–î–†–ï–°–û–í")
    print("=" * 80)
    
    results = []
    
    for i, address in enumerate(test_addresses, 1):
        print(f"\nüìù [{i:2d}] –ó–∞–ø—Ä–æ—Å: '{address}'")
        print("-" * 60)
        
        try:
            response = requests.get(f"{base_url}/search", params={"q": address, "limit": 5})
            
            if response.status_code == 200:
                data = response.json()
                total = data.get('total', 0)
                normalized = data.get('normalized_query', 'N/A')
                house = data.get('house_number', 'N/A')
                
                print(f"‚úÖ –°—Ç–∞—Ç—É—Å: {response.status_code}")
                print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total}")
                print(f"üîß –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–æ: '{normalized}'")
                print(f"üè† –î–æ–º: {house}")
                
                if data.get('results'):
                    print("üìã –¢–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                    for j, result in enumerate(data['results'][:3], 1):
                        full_name = result.get('full_name', 'N/A')
                        level = result.get('level', 'N/A')
                        score = result.get('score', 'N/A')
                        print(f"   {j}. [{level}] {full_name} (score: {score})")
                else:
                    print("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                results.append({
                    'address': address,
                    'status': 'success',
                    'total': total,
                    'normalized': normalized,
                    'house': house,
                    'results': data.get('results', [])
                })
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞: {response.status_code} - {response.text}")
                results.append({
                    'address': address,
                    'status': 'error',
                    'error': f"{response.status_code}: {response.text}"
                })
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            results.append({
                'address': address,
                'status': 'exception',
                'error': str(e)
            })
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 80)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 80)
    
    successful = [r for r in results if r['status'] == 'success']
    errors = [r for r in results if r['status'] != 'success']
    
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(successful)}/{len(results)}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(errors)}")
    
    # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–ª—É—á–∞–∏
    print("\nüîç –ü–†–û–ë–õ–ï–ú–ù–´–ï –°–õ–£–ß–ê–ò:")
    for result in results:
        if result['status'] == 'success':
            if result['total'] == 0:
                print(f"‚ùå '{result['address']}' - –ù–ï–¢ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
            elif result['total'] > 0 and not any('–º–æ—Å–∫–≤–∞' in str(r.get('full_name', '')).lower() for r in result['results']):
                print(f"‚ö†Ô∏è  '{result['address']}' - –ù–ï –ú–û–°–ö–í–ê –í –†–ï–ó–£–õ–¨–¢–ê–¢–ê–•")
    
    return results

if __name__ == "__main__":
    test_addresses()
